# С помощью команды FROM инициализирует сборку и устанавливает образ для последующих инструкций. Dсегда начинаем Dockerfile. 
# Может использоваться несколько раз в одном файле.
# python:3.9-rc-alpine - это python основанная на Alpine Linux (образ поддерживаемый Docker и довольно малого обьем).
FROM python:3.9-rc-alpine

# С помощью этой команды устанавливаем рабочий каталог /app для команд и инструкций, которые следуют в Dockerfile
WORKDIR /app

# С помощью команды ARG задаем значение переменных по умолчанию которые пользователь передает сборщику образа с помощью флага. Если не передать значение будет ошибка.
# А с помощью ENV мы можем перезаписать значение ARG при запуске контейнера.
#ARG PyVer 3.9
ARG PyVer=3.9

# С помощью этой команды добавляем файлы или папки в контейнер. Сначала указываем файл, потом путь.
# COPY- копирует локальные файлы, а команда ADD скачивает файлы (если архив, то он его распакует)
# Так как мы скачиваем файл по ссылке, я бы использовал команду ADD и сделал бы так
#COPY https://megareposytory.net/app.py /app
ADD https://megareposytory.net/app.py /app

# START - такой команды нету. Необходима команда RUN - выполняет команды в новом слое повверх текущего и фиксирует результаты.
# START pip install --trusted-host pypi.python.org -r requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# С помощью этой команды публикуют рабочие порты контейнера, только к тем, к которым можно подключаться извне. можем указать tcp(по умолчанию), так и udp
# В докере по умолчанию все порты закрыты (для безопасности). Мы должны открыть порты сами.
EXPOSE 8080/tcp

# Команда ENTRYPOINT задает команду с аргументами, которая должна выполниться при запуске контейнера. Она схожа с командой CMD, но параметры в ENTRYPOINT 
# не перезаписывается, если контейнер запускают с параметрами командной строки.
ENTRYPOINT ["python$PyVer", "app.py"]

# Команда CMD - основная цель предоставить значения по умолчанию для исполняемого контейнера. 
# (В файле может быть только одна команда CMD, если их будет больше, то выполниться последняя).
# C помощью shell за пускаем команду ps -a - которая показывает список запущенных процессов.
#PS -a
CMD ["/bin/sh", "ps -a"]

# Результат запуска Dockerfile такой: мы запустим python скрипт app.py с аргументом PyVer версией 3.9. Откроем порт для контенера 8080 с tcp соединением. 
# С помощью команды ps -a мы увидим список процессов.

#test
